spring에서 DB접속하기

1. 필요한 라이브러리 등록 -> pom.xml 에 의존성 등록

- ojdbc, mybatis
- spring 에서 추가 라이브러리 등록
- spring-jdbc, mybatis-spring, common-dbcp

2. 클래스를 bean 으로 등록한다. -> XML 방식

3. config.xml, mapper.xml 등록한다.

spring 프로젝트로 보안관련 내용을 처리하는 것을 만듬.
보안 : 인증(+ 비밀번호), 권한 -> spring security
비밀번호를 암호화하는 기능도 제공..!

spring security 모듈 의존성 등록
core, web, config

log4j framework

1. log4j lib 의존성 등록필요
2. legacy프로젝트 생성하면 등록되어있음
3. 설정 : resource/log4j.xml 파일로 설정

기본 패턴설정 : %-5p: %c - %m%n
         이벤트명, 카테고리명, 로그전달메세지 개행

* %c : 카테고리명(logger이름)을 표시
   * 카테고리명이 a.b.c일때, %c{2}는 b.c를 출력
* %C : 클래스명을 표시함.   
   * 풀 클래스 명이 com.kh.logger일때, %C{2}는 kh.logger를 출력
* %d : 로그 시간을 출력한다. java.text.SimpleDateFormat에서 적절한 출력 포맷을 지정할 수 있다. 
   * %d{HH:mm:ss, SSS}
   * %d{yyyy MMM dd HH:mm:ss, SSS}
   * %d{ABSOLUTE} 
   * %d{DATE} 
   * %d{ISO8601}
* %F : 파일명을 출력. 로그시 수행한 메소드, 라인번호가 함께 출력된다.
* %l : 로깅이 발생한 caller의 위치정보. 자바파일명:라인번호(링크제공) 
* %L : 라인 번호만 출력한다(링크없음)
* %m : 로그로 전달된 메시지를 출력한다.
* %M : 로그를 수행한 메소드명을 출력한다. 
* %n : 플랫폼 종속적인 개행문자가 출력. rn 또는 n
* %p : 로그 이벤트명등의 priority 가 출력(debug, info, warn, error, fatal )
* %r : 로그 처리시간 (milliseconds)
* %t : 로그이벤트가 발생된 쓰레드의 이름을 출력
* %% : % 표시를 출력. escaping
* %r : 어플리케이션 시작 이후 부터 로깅이 발생한 시점의 시간(milliseconds)
* %X : 로깅이 발생한 thread와 관련된 MDC(mapped diagnostic context)를 출력합니다. %X{key} 형태.


스프링이 제공하는 interceptor에 대해 알아보자

Interceptor -> 클라언트가 요청을 보내면 Controller에 특정 맵핑메소드를 실행
설정에 의해 맵핑메소드실행 하기전, 후에 특정 로직을 실행시키는 기능

filter와 유사.... 

Interceptor 선언하기
1. HandlerInterceptor(인터페이스) 를 구현한 클래스를 생성
2. HandlerInterceptorAdapter(클래스)를 상속받은 클래스를 생성

재정의 메소드
preHandle : 맵핑메소드가 실행되기 전에 실행할 로직구현

postHandle : 맵핑메소드의 로직이 모두 실행된 후 실행할 로직구현

afterCompletion : 클라이언트에게 응답을 하고난 후 실행할 로직 구현

생성한 클래스를 interceptor로 등록해줘야 실행이됨.
springbeanconfiguration.xml파일에 등록해줌.
 - servlet-context.xml파일
 <interceptors>
    <interceptor> : mapping url를 이용해서 설정


















